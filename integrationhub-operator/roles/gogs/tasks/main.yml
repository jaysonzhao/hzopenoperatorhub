---
# tasks file for integrationhub
- name: svc account 
  k8s:
    definition:
       kind: ServiceAccount
       apiVersion: v1
       metadata:
         labels:
           app: '{{ meta.name }}-gogs'
          name: '{{ meta.name }}-gogs'
          namespace: '{{ meta.namespace }}'

- name: config 
  k8s:
    definition:
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: '{{ meta.name }}-gogscfg'
          namespace: '{{ meta.namespace }}'
          labels:
            app: '{{ meta.name }}-gogs'
        data:
          app.ini: |
            RUN_MODE = prod
            RUN_USER = gogs
      
            [database]
            DB_TYPE  = postgres
            HOST     = '{{ meta.name }}-postgresql:5432'
            NAME     = gogs
            USER     = gogs
            PASSWD   = gogs
      
            [repository]
            ROOT = /opt/gogs/data/repositories
      
            [server]
            ROOT_URL=
            SSH_DOMAIN=
            START_SSH_SERVER=true
            SSH_LISTEN_PORT=10022
      
            [security]
            INSTALL_LOCK = true
      
            [service]
            ENABLE_CAPTCHA = false
      
            [webhook]
            SKIP_TLS_VERIFY = true

- name: pgsql svc 
  k8s:
    definition:
        kind: Service
        apiVersion: v1
        metadata:
          annotations:
            description: Exposes the database server
          name: '{{ meta.name }}-postgresql'
          namespace: '{{ meta.namespace }}'
        spec:
          ports:
          - name: postgresql
            port: 5432
            targetPort: 5432
          selector:
            name: '{{ meta.name }}-postgresql'

- name: pgsql dc
  k8s:
    definition:
        kind: DeploymentConfig
        apiVersion: v1
        metadata:
          annotations:
            description: Defines how to deploy the database
          name: '{{ meta.name }}-postgresql'
          namespace: '{{ meta.namespace }}'
          labels:
            app: '{{ meta.name }}-gogs'
        spec:
          replicas: 1
          selector:
            name: '{{ meta.name }}-postgresql'
          strategy:
            type: Recreate
          template:
            metadata:
              labels:
                name: '{{ meta.name }}-postgresql'
              name: '{{ meta.name }}-postgresql'
            spec:
              serviceAccountName: '{{ meta.name }}-gogs'
              containers:
              - env:
                - name: POSTGRESQL_USER
                  value: ${DATABASE_USER}
                - name: POSTGRESQL_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: POSTGRESQL_DATABASE
                  value: ${DATABASE_NAME}
                - name: POSTGRESQL_MAX_CONNECTIONS
                  value: ${DATABASE_MAX_CONNECTIONS}
                - name: POSTGRESQL_SHARED_BUFFERS
                  value: ${DATABASE_SHARED_BUFFERS}
                - name: POSTGRESQL_ADMIN_PASSWORD
                  value: ${DATABASE_ADMIN_PASSWORD}
                image: ' '
                livenessProbe:
                  initialDelaySeconds: 30
                  tcpSocket:
                    port: 5432
                  timeoutSeconds: 1
                name: postgresql
                ports:
                - containerPort: 5432
                readinessProbe:
                  exec:
                    command:
                    - /bin/sh
                    - -i
                    - -c
                    - psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'
                  initialDelaySeconds: 5
                  timeoutSeconds: 1
                resources:
                  limits:
                    memory: 512Mi
                volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: gogs-postgres-data
              volumes:
              - name: gogs-postgres-data
                emptyDir: {}
          triggers:
          - imageChangeParams:
              automatic: true
              containerNames:
              - postgresql
              from:
                kind: ImageStreamTag
                name: postgresql:${DATABASE_VERSION}
                namespace: openshift
            type: ImageChange
          - type: ConfigChange

- name: gogs svc
  k8s:
    definition:
         kind: Service
         apiVersion: v1
         metadata:
           annotations:
             description: The Gogs server's http port
             service.alpha.openshift.io/dependencies: '[{"name":"{{ meta.name }}-postgresql","namespace":"","kind":"Service"}]'
           labels:
             app: '{{ meta.name }}-gogs'
           name: '{{ meta.name }}-gogs'
           namespace: '{{ meta.namespace }}'
         spec:
           ports:
           - name: 3000-tcp
             port: 3000
             protocol: TCP
             targetPort: 3000
           - name: 10022-tcp
             port: 10022
             protocol: TCP
             targetPort: 10022
           selector:
             app:  '{{ meta.name }}-gogs'
             deploymentconfig:  '{{ meta.name }}-gogs'
           sessionAffinity: None
           type: ClusterIP

- name: gogs is
  k8s:
    definition:
       kind: ImageStream
       apiVersion: v1
       metadata:
         labels:
           app: '{{ meta.name }}-gogs'
         name: '{{ meta.name }}-gogs'
         namespace: '{{ meta.namespace }}'
       spec:
         tags:
         - name: 0.11.34
           from:
             kind: DockerImage
             name: docker.io/openshiftdemos/gogs:0.11.34
           importPolicy: {}
           annotations:
             description: The Gogs git server docker image
             tags: gogs,go,golang
             version: 0.11.34
- name: gogs dc
  k8s:
    definition:
         kind: DeploymentConfig
         apiVersion: v1
         metadata:
           labels:
             app: '{{ meta.name }}-gogs'
           name: '{{ meta.name }}-gogs'
           namespace: '{{ meta.namespace }}'
         spec:
           replicas: 1
           selector:
             app: '{{ meta.name }}-gogs'
             deploymentconfig: '{{ meta.name }}-gogs'
           strategy:
             resources: {}
             rollingParams:
               intervalSeconds: 1
               maxSurge: 25%
               maxUnavailable: 25%
               timeoutSeconds: 600
               updatePeriodSeconds: 1
             type: Rolling
           template:
             metadata:
               creationTimestamp: null
               labels:
                 app: '{{ meta.name }}-gogs'
                 deploymentconfig: '{{ meta.name }}-gogs'
             spec:
               serviceAccountName: '{{ meta.name }}-gogs'
               containers:
               - image: " "
                 imagePullPolicy: Always
                 name: '{{ meta.name }}-gogs'
                 ports:
                 - containerPort: 3000
                   protocol: TCP
                 - containerPort: 10022
                   protocol: TCP
                 resources: {}
                 terminationMessagePath: /dev/termination-log
                 volumeMounts:
                 - name: gogs-data
                   mountPath: /opt/gogs/data
                 - name: gogs-config
                   mountPath: /etc/gogs/conf
                 readinessProbe:
                     httpGet:
                       path: /
                       port: 3000
                       scheme: HTTP
                     initialDelaySeconds: 3
                     timeoutSeconds: 1
                     periodSeconds: 20
                     successThreshold: 1
                     failureThreshold: 3
                 livenessProbe:
                     httpGet:
                       path: /
                       port: 3000
                       scheme: HTTP
                     initialDelaySeconds: 3
                     timeoutSeconds: 1
                     periodSeconds: 10
                     successThreshold: 1
                     failureThreshold: 3
               dnsPolicy: ClusterFirst
               restartPolicy: Always
               securityContext: {}
               terminationGracePeriodSeconds: 30
               volumes:
               - name: gogs-data
                 emptyDir: {}
               - name: gogs-config
                 configMap:
                   name: '{{ meta.name }}-gogscfg'
                   items:
                     - key: app.ini
                       path: app.ini
           test: false
           triggers:
           - type: ConfigChange
           - imageChangeParams:
               automatic: true
               containerNames:
               - '{{ meta.name }}-gogs'
               from:
                 kind: ImageStreamTag
                 name: '{{ meta.name }}-gogs:0.11.34'
             type: ImageChange

- name: gogs route http
  k8s:
    definition:
      kind: Route
      apiVersion: v1
      id: '{{ meta.name }}-http'
      metadata:
        annotations:
          description: Route for application's http service.
        labels:
          app: '{{ meta.name }}-gogs'
        name: '{{ meta.name }}-gogs'
        namespace: '{{ meta.namespace }}'
      spec:
        port:
          targetPort: 3000-tcp
        to:
          name: '{{ meta.name }}-gogs'
- name: gogs route ssh
  k8s:
    definition:
      kind: Route
        apiVersion: v1
        id: '{{ meta.name }}-ssh'
        metadata:
          annotations:
            description: Route for application's ssh service.
          labels:
            app: '{{ meta.name }}-gogs'
          name: '{{ meta.name }}-ssh'
          namespace: '{{ meta.namespace }}'
        spec:
          host: secure
          port:
            targetPort: 10022-tcp
          to:
            name: '{{ meta.name }}-gogs'